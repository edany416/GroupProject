{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red211\green24\blue149;\red0\green0\blue0;\red255\green255\blue255;
\red35\green255\blue131;\red0\green160\blue255;\red255\green44\blue56;\red65\green204\blue69;}
{\*\expandedcolortbl;;\csgenericrgb\c82800\c9500\c58300;\csgenericrgb\c0\c0\c0;\csgenericrgb\c100000\c100000\c100000;
\csgenericrgb\c13700\c100000\c51200;\csgenericrgb\c0\c62600\c100000;\csgenericrgb\c100000\c17100\c21900;\csgenericrgb\c25500\c80100\c27000;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 if\cf4  \cf5 FirebaseManager\cf4 .\cf5 instance\cf4 .\cf5 userBelongsToHouse\cf4  \{
\f1 \cf0 \

\f0 \cf4             \cf2 if\cf4  \cf5 items\cf4  == \cf2 nil\cf4  \{
\f1 \cf0 \

\f0 \cf4                 \cf2 self\cf4 .\cf5 items\cf4  = \cf5 FirebaseManager\cf4 .\cf5 instance\cf4 .\cf5 productList
\f1 \cf0 \

\f0 \cf4             \}
\f1 \cf0 \

\f0 \cf4             
\f1 \cf0 \

\f0 \cf4             \cf5 DBManager\cf4 .\cf5 instance\cf4 .\cf5 REF_LISTS\cf4 .\cf5 child\cf4 (\cf5 FirebaseManager\cf4 .\cf5 instance\cf4 .\cf5 houseID\cf4 ).\cf5 observe\cf4 (.\cf5 childAdded\cf4 , with: \{(snapshot) -> \cf6 Void\cf4  \cf2 in
\f1 \cf0 \

\f0 \cf4                 
\f1 \cf0 \

\f0 \cf4                 \cf6 print\cf4 (\cf7 "observer call back called"\cf4 )
\f1 \cf0 \

\f0 \cf4                 \cf2 let\cf4  data = snapshot.\cf5 value\cf4  \cf2 as\cf4 ? [\cf6 String\cf4  : \cf2 Any\cf4 ] ?? [:]
\f1 \cf0 \

\f0 \cf4                 
\f1 \cf0 \

\f0 \cf4                 \cf2 if\cf4  data.\cf6 isEmpty\cf4  \{
\f1 \cf0 \

\f0 \cf4                     \cf2 self\cf4 .\cf5 items\cf4  = [\cf6 String\cf4 ]()
\f1 \cf0 \

\f0 \cf4                 \} \cf2 else\cf4  \{
\f1 \cf0 \

\f0 \cf4                     \cf2 self\cf4 .\cf5 items\cf4  = \cf6 Array\cf4 (data.\cf6 values\cf4 ) \cf2 as\cf4 ? [\cf6 String\cf4 ]
\f1 \cf0 \

\f0 \cf4                 \}
\f1 \cf0 \

\f0 \cf4                 
\f1 \cf0 \

\f0 \cf4                 
\f1 \cf0 \

\f0 \cf8 //                if data["items"] is String \{
\f1 \cf0 \

\f0 \cf8 //                    self.items = [String]()
\f1 \cf0 \

\f0 \cf8 //                \} else \{
\f1 \cf0 \

\f0 \cf8 //                    let items = data["items"] as! NSDictionary
\f1 \cf0 \

\f0 \cf8 //                    var dataArray = [String]()
\f1 \cf0 \

\f0 \cf8 //                    
\f1 \cf0 \

\f0 \cf8 //                    for (key, value) in items \{
\f1 \cf0 \

\f0 \cf8 //                        dataArray.append(value as! String)
\f1 \cf0 \

\f0 \cf8 //                    \}
\f1 \cf0 \

\f0 \cf8 //                    self.items = dataArray
\f1 \cf0 \

\f0 \cf8 //                \}
\f1 \cf0 \

\f0 \cf4                 
\f1 \cf0 \

\f0 \cf4                 
\f1 \cf0 \

\f0 \cf4                 
\f1 \cf0 \

\f0 \cf4                 \cf2 self\cf4 .\cf5 tableView\cf4 .\cf6 reloadData\cf4 ()
\f1 \cf0 \

\f0 \cf4             \})
\f1 \cf0 \

\f0 \cf4             
\f1 \cf0 \

\f0 \cf4             \cf5 tableView\cf4 .\cf6 reloadData\cf4 ()
\f1 \cf0 \

\f0 \cf4         \}}